

{% for protocol in types.protocols|annotated:"jsAvailable" %}

/**
Packs a JavaScript object conforming to the {{protocol.name}} protocol defined in Swift

@parameter {object} obj The object to pack
*/
function pack{{protocol.name}}(obj) {
  return {
    {% for var in protocol.allVariables %}
      {% if var.type.annotations.jsAvailable and var.type.kind == "protocol" %}
      {{ var.name }}: pack{{var.type.name}}(obj.{{var.name}})
      {% else %}
      {{ var.name }}: obj.{{ var.name }}
      {% endif %}
      {% if not forloop.last %},{% endif %}
    {% endfor %}
  };
}

{% endfor %}

var s = null;
function swiftMessage(msg) {
  if (s == null) {
    s = require('net').Socket();
    s.connect(8403, 'localhost');
  }

  var json = JSON.stringify(msg);

  var lenbuf = Buffer.allocUnsafe(4);
  lenbuf.writeInt32LE(json.length, 0);

  s.write(lenbuf);
  s.write(json);
}

{% for type in types.all|annotated:"jsAvailable" %}

module.exports.{{type.name}} = {
  {% for method in type.allMethods|annotated:"jsAvailable" %}
    {{ method.shortName }}: function(
      {% for param in method.parameters %}
        {{ param.name }}{% if not forloop.last %},{% endif %}
      {% endfor %}
    ) {
      swiftMessage({a: "callStatic", t: "{{type.name}}", m: "{{method.shortName}}",
        {% if method.parameters.count > 0 %}
        args: {
          {% for param in method.parameters %}
            {% if param.type.annotations.jsAvailable and param.type.kind == "protocol" %}
            {{ param.name }}: pack{{param.unwrappedTypeName}}({{param.name}})
            {% else %}
            {{ param.name }}
            {% endif %}
            {% if not forloop.last %},{% endif %}
          {% endfor %}
        }
        {% endif %}
      })
    },
  {% endfor %}
};

{% endfor %}
