import Cheetah

func callStatic(typeName: String, methodName: String, arguments: JSONObject?) throws {
  switch (typeName, methodName) {
  {% for type in types.all|annotated:"jsAvailable" %}
    {% for method in type.allMethods|annotated:"jsAvailable" %}
      case ("{{type.name}}", "{{method.shortName}}"):
        {{ type.name }}.{{ method.shortName }}(
          {% for param in method.parameters %}
            {% if param.type.annotations.jsAvailable and param.type.kind == "protocol" %}
              {{ param.argumentLabel }}: try {{ param.unwrappedTypeName }}FromJavascript(unpacking: arguments!["{{param.name}}"] as! JSONObject)
            {% else %}
              {{ param.argumentLabel }}: {{ param.typeName }}(arguments!["{{param.name}}"])!
            {% endif %}
            {% if not forloop.last %},{% endif %}
          {% endfor %}
        )
    {% endfor %}
  {% endfor %}

  default:
    fatalError()
  }
}

{% for protocol in types.protocols|annotated:"jsAvailable" %}

class {{protocol.name}}FromJavascript : {{ protocol.name }} {
    {% for var in protocol.allVariables %}
    var {{ var.name }}: {{ var.typeName }}
    {% endfor %}

    init(unpacking json: JSONObject) throws {
        guard
          {% for var in protocol.allVariables %}
            {% if var.type.annotations.jsAvailable and var.type.kind == "protocol" %}
              let {{var.name}}JSONObject = json["{{var.name}}"] as? JSONObject,
              let {{var.name}} = try? {{var.unwrappedTypeName}}FromJavascript(unpacking: {{var.name}}JSONObject)
            {% else %}
              let {{var.name}} = {{var.unwrappedTypeName}}(json["{{var.name}}"])
            {% endif %}
            {% if not forloop.last %},{% endif %}
          {% endfor %}
        else {
            fatalError("JavaScript object does not conform to protocol '{{protocol.name}}'")
        }

        {% for var in protocol.allVariables %}
          self.{{var.name}} = {{var.name}}
        {% endfor %}
    }
}

{% endfor %}
